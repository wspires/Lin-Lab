//
//  Expression_Evaluator.hpp
//  Lin Lab
//
//  Created by Wade Spires on 1/22/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#ifndef EXPRESSION_EVALUATOR_HPP
#define EXPRESSION_EVALUATOR_HPP

#include "All_Functions.hpp"
#include "All_Operators.hpp"

// c++ headers
#include  <string>
#include  <vector>

namespace exp_eval
{
    
class Expression_Evaluator
{
public:
    typedef std::vector<std::string> Vec_Str;
    
    // Single operator or function result as generated by evaluate_rpn().
    struct Result
    {
        enum Result_Type
        {
            Op = 0, Func = 1, Ident = 2
        };
        
        Result()
        { }
        
        // Operator or function name.
        std::string in_name;
        
        // Whether in_name is an operator, function, or identifier.
        Result_Type result_type;
        
        // Name of output result.
        std::string out_name;
        
        // Arguments to operator or function.
        Vec_Str args;
        
        std::string to_string() const;
    };
    
    typedef std::vector<Result> Vec_Result;
    
    Expression_Evaluator(char dec_sep = '.');
    
    Vec_Str tokenize(std::string const & expression);
    Vec_Str to_rpn(Vec_Str const & tokens, std::string & error);
    Vec_Result evaluate_rpn(Vec_Str const & tokens_rpn, std::string & error);
    
    bool is_identifier(std::string token);
    
protected:
    void handle_unary_op_check(char c
                          , char prev_c
                          , Vec_Str & tokens
                          , std::string & token
                          );
    bool is_part_of_ident_token(char c);
    bool is_not_part_of_ident_token(char c);
    bool is_comparison_op(char c);
    
private:
    All_Operators all_operators_;
    All_Functions all_functions_;
    char dec_sep_;
};

} // namespace exp_eval

#endif // EXPRESSION_EVALUATOR_HPP
